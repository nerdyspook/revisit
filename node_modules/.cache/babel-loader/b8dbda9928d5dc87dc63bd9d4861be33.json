{"ast":null,"code":"import { Server, Model, RestSerializer } from \"miragejs\";\nimport { loginHandler, signupHandler } from \"./backend/controllers/AuthController\";\nimport { getHistoryVideosHandler, addVideoToHistoryHandler, removeVideoFromHistoryHandler, clearHistoryHandler } from \"./backend/controllers/HistoryController\";\nimport { getAllVideosHandler, getVideoHandler } from \"./backend/controllers/VideoController\";\nimport { videos } from \"./backend/db/videos\";\nimport { categories } from \"./backend/db/categories\";\nimport { getAllCategoriesHandler, getCategoryHandler } from \"./backend/controllers/CategoryController\";\nimport { getLikedVideosHandler, addItemToLikedVideos, removeItemFromLikedVideos } from \"./backend/controllers/LikeController\";\nimport { getAllPlaylistsHandler, addNewPlaylistHandler, removePlaylistHandler, getVideosFromPlaylistHandler, addVideoToPlaylistHandler, removeVideoFromPlaylistHandler } from \"./backend/controllers/PlaylistController\";\nimport { users } from \"./backend/db/users\";\nexport function makeServer() {\n  let {\n    environment = \"development\"\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Server({\n    serializers: {\n      application: RestSerializer\n    },\n    environment,\n    // TODO: Use Relationships to have named relational Data\n    models: {\n      video: Model,\n      category: Model,\n      user: Model,\n      like: Model,\n      history: Model,\n      playlist: Model\n    },\n\n    // Runs on the start of the server\n    seeds(server) {\n      server.logging = false;\n      videos.forEach(item => {\n        server.create(\"video\", { ...item\n        });\n      });\n      categories.forEach(item => server.create(\"category\", { ...item\n      }));\n      users.forEach(item => server.create(\"user\", { ...item,\n        likes: [],\n        history: [],\n        playlists: []\n      }));\n    },\n\n    routes() {\n      this.namespace = \"api\"; // auth routes (public)\n\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this)); // video routes (public)\n\n      this.get(\"/videos\", getAllVideosHandler.bind(this));\n      this.get(\"video/:videoId\", getVideoHandler.bind(this)); // TODO: POST VIDEO TO DB\n      // categories routes (public)\n\n      this.get(\"/categories\", getAllCategoriesHandler.bind(this));\n      this.get(\"/categories/:categoryId\", getCategoryHandler.bind(this)); // likes routes (private)\n\n      this.get(\"/user/likes\", getLikedVideosHandler.bind(this));\n      this.post(\"/user/likes\", addItemToLikedVideos.bind(this));\n      this.delete(\"/user/likes/:videoId\", removeItemFromLikedVideos.bind(this)); // playlist routes (private)\n\n      this.get(\"/user/playlists\", getAllPlaylistsHandler.bind(this));\n      this.post(\"/user/playlists\", addNewPlaylistHandler.bind(this));\n      this.delete(\"/user/playlists/:playlistId\", removePlaylistHandler.bind(this));\n      this.get(\"/user/playlists/:playlistId\", getVideosFromPlaylistHandler.bind(this));\n      this.post(\"/user/playlists/:playlistId\", addVideoToPlaylistHandler.bind(this));\n      this.delete(\"/user/playlists/:playlistId/:videoId\", removeVideoFromPlaylistHandler.bind(this)); // history routes (private)\n\n      this.get(\"/user/history\", getHistoryVideosHandler.bind(this));\n      this.post(\"/user/history\", addVideoToHistoryHandler.bind(this));\n      this.delete(\"/user/history/:videoId\", removeVideoFromHistoryHandler.bind(this));\n      this.delete(\"/user/history/all\", clearHistoryHandler.bind(this));\n    }\n\n  });\n}","map":{"version":3,"sources":["C:/Users/susan/OneDrive/Documents/GitHub/revisit/src/server.js"],"names":["Server","Model","RestSerializer","loginHandler","signupHandler","getHistoryVideosHandler","addVideoToHistoryHandler","removeVideoFromHistoryHandler","clearHistoryHandler","getAllVideosHandler","getVideoHandler","videos","categories","getAllCategoriesHandler","getCategoryHandler","getLikedVideosHandler","addItemToLikedVideos","removeItemFromLikedVideos","getAllPlaylistsHandler","addNewPlaylistHandler","removePlaylistHandler","getVideosFromPlaylistHandler","addVideoToPlaylistHandler","removeVideoFromPlaylistHandler","users","makeServer","environment","serializers","application","models","video","category","user","like","history","playlist","seeds","server","logging","forEach","item","create","likes","playlists","routes","namespace","post","bind","get","delete"],"mappings":"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","sourcesContent":["import { Server, Model, RestSerializer } from \"miragejs\";\r\nimport {\r\n    loginHandler,\r\n    signupHandler,\r\n} from \"./backend/controllers/AuthController\";\r\nimport {\r\n    getHistoryVideosHandler,\r\n    addVideoToHistoryHandler,\r\n    removeVideoFromHistoryHandler,\r\n    clearHistoryHandler,\r\n} from \"./backend/controllers/HistoryController\";\r\nimport {\r\n    getAllVideosHandler,\r\n    getVideoHandler,\r\n} from \"./backend/controllers/VideoController\";\r\nimport { videos } from \"./backend/db/videos\";\r\nimport { categories } from \"./backend/db/categories\";\r\nimport {\r\n    getAllCategoriesHandler,\r\n    getCategoryHandler,\r\n} from \"./backend/controllers/CategoryController\";\r\nimport {\r\n    getLikedVideosHandler,\r\n    addItemToLikedVideos,\r\n    removeItemFromLikedVideos,\r\n} from \"./backend/controllers/LikeController\";\r\nimport {\r\n    getAllPlaylistsHandler,\r\n    addNewPlaylistHandler,\r\n    removePlaylistHandler,\r\n    getVideosFromPlaylistHandler,\r\n    addVideoToPlaylistHandler,\r\n    removeVideoFromPlaylistHandler,\r\n} from \"./backend/controllers/PlaylistController\";\r\nimport { users } from \"./backend/db/users\";\r\nexport function makeServer({ environment = \"development\" } = {}) {\r\n    return new Server({\r\n        serializers: {\r\n            application: RestSerializer,\r\n        },\r\n        environment,\r\n        // TODO: Use Relationships to have named relational Data\r\n        models: {\r\n            video: Model,\r\n            category: Model,\r\n            user: Model,\r\n            like: Model,\r\n            history: Model,\r\n            playlist: Model,\r\n        },\r\n\r\n        // Runs on the start of the server\r\n        seeds(server) {\r\n            server.logging = false;\r\n            videos.forEach((item) => {\r\n                server.create(\"video\", { ...item });\r\n            });\r\n            categories.forEach((item) =>\r\n                server.create(\"category\", { ...item })\r\n            );\r\n            users.forEach((item) =>\r\n                server.create(\"user\", {\r\n                    ...item,\r\n                    likes: [],\r\n                    history: [],\r\n                    playlists: [],\r\n                })\r\n            );\r\n        },\r\n\r\n        routes() {\r\n            this.namespace = \"api\";\r\n            // auth routes (public)\r\n            this.post(\"/auth/signup\", signupHandler.bind(this));\r\n            this.post(\"/auth/login\", loginHandler.bind(this));\r\n\r\n            // video routes (public)\r\n            this.get(\"/videos\", getAllVideosHandler.bind(this));\r\n            this.get(\"video/:videoId\", getVideoHandler.bind(this));\r\n\r\n            // TODO: POST VIDEO TO DB\r\n\r\n            // categories routes (public)\r\n            this.get(\"/categories\", getAllCategoriesHandler.bind(this));\r\n            this.get(\"/categories/:categoryId\", getCategoryHandler.bind(this));\r\n\r\n            // likes routes (private)\r\n            this.get(\"/user/likes\", getLikedVideosHandler.bind(this));\r\n            this.post(\"/user/likes\", addItemToLikedVideos.bind(this));\r\n            this.delete(\r\n                \"/user/likes/:videoId\",\r\n                removeItemFromLikedVideos.bind(this)\r\n            );\r\n\r\n            // playlist routes (private)\r\n            this.get(\"/user/playlists\", getAllPlaylistsHandler.bind(this));\r\n            this.post(\"/user/playlists\", addNewPlaylistHandler.bind(this));\r\n            this.delete(\r\n                \"/user/playlists/:playlistId\",\r\n                removePlaylistHandler.bind(this)\r\n            );\r\n\r\n            this.get(\r\n                \"/user/playlists/:playlistId\",\r\n                getVideosFromPlaylistHandler.bind(this)\r\n            );\r\n            this.post(\r\n                \"/user/playlists/:playlistId\",\r\n                addVideoToPlaylistHandler.bind(this)\r\n            );\r\n            this.delete(\r\n                \"/user/playlists/:playlistId/:videoId\",\r\n                removeVideoFromPlaylistHandler.bind(this)\r\n            );\r\n\r\n            // history routes (private)\r\n            this.get(\"/user/history\", getHistoryVideosHandler.bind(this));\r\n            this.post(\"/user/history\", addVideoToHistoryHandler.bind(this));\r\n            this.delete(\r\n                \"/user/history/:videoId\",\r\n                removeVideoFromHistoryHandler.bind(this)\r\n            );\r\n            this.delete(\"/user/history/all\", clearHistoryHandler.bind(this));\r\n        },\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
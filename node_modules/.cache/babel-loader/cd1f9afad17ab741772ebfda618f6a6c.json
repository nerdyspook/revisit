{"ast":null,"code":"import { Response } from \"miragejs\";\n/**\r\n * All the routes related to Videos are present here.\r\n * These are Publicly accessible routes.\r\n * */\n\n/**\r\n * This handler handles gets all videos in the db.\r\n * send GET Request at /api/videos\r\n * */\n\nexport const getAllVideosHandler = function () {\n  try {\n    return new Response(200, {}, {\n      videos: this.db.videos\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles uploads a new video to the db.\r\n * send POST Request at /api/user/videos/\r\n * */\n// TODO: postVideoHandler\n\n/**\r\n * This handler handles gets all videos in the db.\r\n * send GET Request at /api/user/videos/:videoId\r\n * */\n\nexport const getVideoHandler = function (schema, request) {\n  const {\n    videoId\n  } = request.params;\n\n  try {\n    const video = schema.videos.findBy({\n      _id: videoId\n    }).attrs;\n    return new Response(200, {}, {\n      video\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/susan/OneDrive/Documents/GitHub/revisit/src/backend/controllers/VideoController.js"],"names":["Response","getAllVideosHandler","videos","db","error","getVideoHandler","schema","request","videoId","params","video","findBy","_id","attrs"],"mappings":"AAAA,SAASA,QAAT,QAAyB,UAAzB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,mBAAmB,GAAG,YAAY;AAC3C,MAAI;AACA,WAAO,IAAID,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEE,MAAAA,MAAM,EAAE,KAAKC,EAAL,CAAQD;AAAlB,KAAtB,CAAP;AACH,GAFD,CAEE,OAAOE,KAAP,EAAc;AACZ,WAAO,IAAIJ,QAAJ,CACH,GADG,EAEH,EAFG,EAGH;AACII,MAAAA;AADJ,KAHG,CAAP;AAOH;AACJ,CAZM;AAcP;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,eAAe,GAAG,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AACtD,QAAM;AAAEC,IAAAA;AAAF,MAAcD,OAAO,CAACE,MAA5B;;AACA,MAAI;AACA,UAAMC,KAAK,GAAGJ,MAAM,CAACJ,MAAP,CAAcS,MAAd,CAAqB;AAAEC,MAAAA,GAAG,EAAEJ;AAAP,KAArB,EAAuCK,KAArD;AACA,WAAO,IAAIb,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEU,MAAAA;AAAF,KAAtB,CAAP;AACH,GAHD,CAGE,OAAON,KAAP,EAAc;AACZ,WAAO,IAAIJ,QAAJ,CACH,GADG,EAEH,EAFG,EAGH;AACII,MAAAA;AADJ,KAHG,CAAP;AAOH;AACJ,CAdM","sourcesContent":["import { Response } from \"miragejs\";\r\n\r\n/**\r\n * All the routes related to Videos are present here.\r\n * These are Publicly accessible routes.\r\n * */\r\n\r\n/**\r\n * This handler handles gets all videos in the db.\r\n * send GET Request at /api/videos\r\n * */\r\n\r\nexport const getAllVideosHandler = function () {\r\n    try {\r\n        return new Response(200, {}, { videos: this.db.videos });\r\n    } catch (error) {\r\n        return new Response(\r\n            500,\r\n            {},\r\n            {\r\n                error,\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * This handler handles uploads a new video to the db.\r\n * send POST Request at /api/user/videos/\r\n * */\r\n\r\n// TODO: postVideoHandler\r\n\r\n/**\r\n * This handler handles gets all videos in the db.\r\n * send GET Request at /api/user/videos/:videoId\r\n * */\r\n\r\nexport const getVideoHandler = function (schema, request) {\r\n    const { videoId } = request.params;\r\n    try {\r\n        const video = schema.videos.findBy({ _id: videoId }).attrs;\r\n        return new Response(200, {}, { video });\r\n    } catch (error) {\r\n        return new Response(\r\n            500,\r\n            {},\r\n            {\r\n                error,\r\n            }\r\n        );\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
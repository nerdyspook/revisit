{"ast":null,"code":"import { v4 as uuid } from \"uuid\";\nimport { Response } from \"miragejs\";\nimport { formatDate } from \"../utils/authUtils\";\n\nconst sign = require(\"jwt-encode\");\n/**\r\n * All the routes related to Auth are present here.\r\n * These are Publicly accessible routes.\r\n * */\n\n/**\r\n * This handler handles user signups.\r\n * send POST Request at /api/auth/signup\r\n * body contains {firstName, lastName, email, password}\r\n * */\n\n\nexport const signupHandler = function (schema, request) {\n  const {\n    email,\n    password,\n    ...rest\n  } = JSON.parse(request.requestBody);\n\n  try {\n    // check if email already exists\n    const foundUser = schema.users.findBy({\n      email\n    });\n\n    if (foundUser) {\n      return new Response(422, {}, {\n        errors: [\"Unprocessable Entity. Email Already Exists.\"]\n      });\n    }\n\n    const _id = uuid();\n\n    const newUser = {\n      _id,\n      email,\n      password,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      ...rest,\n      likes: [],\n      history: [],\n      playlists: []\n    };\n    const createdUser = schema.users.create(newUser);\n    const encodedToken = sign({\n      _id,\n      email\n    }, process.env.REACT_APP_JWT_SECRET);\n    return new Response(201, {}, {\n      createdUser,\n      encodedToken\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles user login.\r\n * send POST Request at /api/auth/login\r\n * body contains {email, password}\r\n * */\n\nexport const loginHandler = function (schema, request) {\n  const {\n    email,\n    password\n  } = JSON.parse(request.requestBody);\n\n  try {\n    const foundUser = schema.users.findBy({\n      email\n    });\n\n    if (!foundUser) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    if (password === foundUser.password) {\n      const encodedToken = sign({\n        _id: foundUser._id,\n        email\n      }, process.env.REACT_APP_JWT_SECRET);\n      foundUser.password = undefined;\n      return new Response(200, {}, {\n        foundUser,\n        encodedToken\n      });\n    }\n\n    new Response(401, {}, {\n      errors: [\"The credentials you entered are invalid. Unauthorized access error.\"]\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/susan/OneDrive/Documents/GitHub/revisit/src/backend/controllers/AuthController.js"],"names":["v4","uuid","Response","formatDate","sign","require","signupHandler","schema","request","email","password","rest","JSON","parse","requestBody","foundUser","users","findBy","errors","_id","newUser","createdAt","updatedAt","likes","history","playlists","createdUser","create","encodedToken","process","env","REACT_APP_JWT_SECRET","error","loginHandler","undefined"],"mappings":"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","sourcesContent":["import { v4 as uuid } from \"uuid\";\r\nimport { Response } from \"miragejs\";\r\nimport { formatDate } from \"../utils/authUtils\";\r\nconst sign = require(\"jwt-encode\");\r\n/**\r\n * All the routes related to Auth are present here.\r\n * These are Publicly accessible routes.\r\n * */\r\n\r\n/**\r\n * This handler handles user signups.\r\n * send POST Request at /api/auth/signup\r\n * body contains {firstName, lastName, email, password}\r\n * */\r\n\r\nexport const signupHandler = function (schema, request) {\r\n    const { email, password, ...rest } = JSON.parse(request.requestBody);\r\n    try {\r\n        // check if email already exists\r\n        const foundUser = schema.users.findBy({ email });\r\n        if (foundUser) {\r\n            return new Response(\r\n                422,\r\n                {},\r\n                {\r\n                    errors: [\"Unprocessable Entity. Email Already Exists.\"],\r\n                }\r\n            );\r\n        }\r\n        const _id = uuid();\r\n        const newUser = {\r\n            _id,\r\n            email,\r\n            password,\r\n            createdAt: formatDate(),\r\n            updatedAt: formatDate(),\r\n            ...rest,\r\n            likes: [],\r\n            history: [],\r\n            playlists: [],\r\n        };\r\n        const createdUser = schema.users.create(newUser);\r\n        const encodedToken = sign(\r\n            { _id, email },\r\n            process.env.REACT_APP_JWT_SECRET\r\n        );\r\n        return new Response(201, {}, { createdUser, encodedToken });\r\n    } catch (error) {\r\n        return new Response(\r\n            500,\r\n            {},\r\n            {\r\n                error,\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * This handler handles user login.\r\n * send POST Request at /api/auth/login\r\n * body contains {email, password}\r\n * */\r\n\r\nexport const loginHandler = function (schema, request) {\r\n    const { email, password } = JSON.parse(request.requestBody);\r\n    try {\r\n        const foundUser = schema.users.findBy({ email });\r\n        if (!foundUser) {\r\n            return new Response(\r\n                404,\r\n                {},\r\n                {\r\n                    errors: [\r\n                        \"The email you entered is not Registered. Not Found error\",\r\n                    ],\r\n                }\r\n            );\r\n        }\r\n        if (password === foundUser.password) {\r\n            const encodedToken = sign(\r\n                { _id: foundUser._id, email },\r\n                process.env.REACT_APP_JWT_SECRET\r\n            );\r\n            foundUser.password = undefined;\r\n            return new Response(200, {}, { foundUser, encodedToken });\r\n        }\r\n        new Response(\r\n            401,\r\n            {},\r\n            {\r\n                errors: [\r\n                    \"The credentials you entered are invalid. Unauthorized access error.\",\r\n                ],\r\n            }\r\n        );\r\n    } catch (error) {\r\n        return new Response(\r\n            500,\r\n            {},\r\n            {\r\n                error,\r\n            }\r\n        );\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
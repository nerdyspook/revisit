{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { requiresAuth } from \"../utils/authUtils\";\n/**\r\n * All the routes related to User History are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\n\n/**\r\n * This handler handles getting videos from user's history.\r\n * send GET Request at /api/user/history\r\n * */\n\nexport const getHistoryVideosHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    return new Response(200, {}, {\n      history: user.history\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles adding videos to user's history.\r\n * send POST Request at /api/user/history\r\n * body contains {video}\r\n * */\n\nexport const addVideoToHistoryHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const {\n      video\n    } = JSON.parse(request.requestBody);\n\n    if (user.history.some(item => item.id === video.id)) {\n      return new Response(409, {}, {\n        errors: [\"The video is already in your history\"]\n      });\n    }\n\n    user.history.push(video);\n    return new Response(201, {}, {\n      history: user.history\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles removing videos from user's history.\r\n * send DELETE Request at /api/user/history/:videoId\r\n * */\n\nexport const removeVideoFromHistoryHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const videoId = request.params.videoId;\n    const filteredHistory = user.history.filter(item => item._id !== videoId);\n    this.db.users.update({\n      history: filteredHistory\n    });\n    return new Response(200, {}, {\n      history: filteredHistory\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles removing videos from user's history.\r\n * send DELETE Request at /api/user/history/all\r\n * */\n\nexport const clearHistoryHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    this.db.users.update({\n      history: []\n    });\n    return new Response(200, {}, {\n      history: []\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/susan/OneDrive/Documents/GitHub/revisit/src/backend/controllers/HistoryController.js"],"names":["Response","requiresAuth","getHistoryVideosHandler","schema","request","user","call","errors","history","error","addVideoToHistoryHandler","video","JSON","parse","requestBody","some","item","id","push","removeVideoFromHistoryHandler","videoId","params","filteredHistory","filter","_id","db","users","update","clearHistoryHandler"],"mappings":"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","sourcesContent":["import { Response } from \"miragejs\";\r\nimport { requiresAuth } from \"../utils/authUtils\";\r\n\r\n/**\r\n * All the routes related to User History are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\r\n\r\n/**\r\n * This handler handles getting videos from user's history.\r\n * send GET Request at /api/user/history\r\n * */\r\nexport const getHistoryVideosHandler = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    try {\r\n        if (!user) {\r\n            new Response(\r\n                404,\r\n                {},\r\n                {\r\n                    errors: [\r\n                        \"The email you entered is not Registered. Not Found error\",\r\n                    ],\r\n                }\r\n            );\r\n        }\r\n        return new Response(200, {}, { history: user.history });\r\n    } catch (error) {\r\n        return new Response(\r\n            500,\r\n            {},\r\n            {\r\n                error,\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * This handler handles adding videos to user's history.\r\n * send POST Request at /api/user/history\r\n * body contains {video}\r\n * */\r\n\r\nexport const addVideoToHistoryHandler = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    try {\r\n        if (!user) {\r\n            return new Response(\r\n                404,\r\n                {},\r\n                {\r\n                    errors: [\r\n                        \"The email you entered is not Registered. Not Found error\",\r\n                    ],\r\n                }\r\n            );\r\n        }\r\n        const { video } = JSON.parse(request.requestBody);\r\n        if (user.history.some((item) => item.id === video.id)) {\r\n            return new Response(\r\n                409,\r\n                {},\r\n                {\r\n                    errors: [\"The video is already in your history\"],\r\n                }\r\n            );\r\n        }\r\n        user.history.push(video);\r\n        return new Response(201, {}, { history: user.history });\r\n    } catch (error) {\r\n        return new Response(\r\n            500,\r\n            {},\r\n            {\r\n                error,\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * This handler handles removing videos from user's history.\r\n * send DELETE Request at /api/user/history/:videoId\r\n * */\r\n\r\nexport const removeVideoFromHistoryHandler = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    try {\r\n        if (!user) {\r\n            return new Response(\r\n                404,\r\n                {},\r\n                {\r\n                    errors: [\r\n                        \"The email you entered is not Registered. Not Found error\",\r\n                    ],\r\n                }\r\n            );\r\n        }\r\n        const videoId = request.params.videoId;\r\n        const filteredHistory = user.history.filter(\r\n            (item) => item._id !== videoId\r\n        );\r\n        this.db.users.update({ history: filteredHistory });\r\n        return new Response(200, {}, { history: filteredHistory });\r\n    } catch (error) {\r\n        return new Response(\r\n            500,\r\n            {},\r\n            {\r\n                error,\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * This handler handles removing videos from user's history.\r\n * send DELETE Request at /api/user/history/all\r\n * */\r\n\r\nexport const clearHistoryHandler = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    try {\r\n        if (!user) {\r\n            return new Response(\r\n                404,\r\n                {},\r\n                {\r\n                    errors: [\r\n                        \"The email you entered is not Registered. Not Found error\",\r\n                    ],\r\n                }\r\n            );\r\n        }\r\n        this.db.users.update({ history: [] });\r\n        return new Response(200, {}, { history: [] });\r\n    } catch (error) {\r\n        return new Response(\r\n            500,\r\n            {},\r\n            {\r\n                error,\r\n            }\r\n        );\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
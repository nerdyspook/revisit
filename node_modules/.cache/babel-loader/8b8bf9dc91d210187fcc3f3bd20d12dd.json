{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { requiresAuth } from \"../utils/authUtils\";\nimport { v4 as uuid } from \"uuid\";\n/**\r\n * All the routes related to User Playlists are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\n\n/**\r\n * This handler handles getting all user's playlists.\r\n * send GET Request at /api/user/playlist\r\n * */\n\nexport const getAllPlaylistsHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    return new Response(200, {}, {\n      playlists: user.playlists\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles adding playlist to user's playlists.\r\n * send POST Request at /api/user/playlists\r\n * body contains {playlist: {title: \"foo\", description:\"bar bar bar\" }}\r\n * */\n\nexport const addNewPlaylistHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (user) {\n    const {\n      playlist\n    } = JSON.parse(request.requestBody);\n    user.playlists.push({ ...playlist,\n      videos: [],\n      _id: uuid()\n    });\n    return new Response(201, {}, {\n      playlists: user.playlists\n    });\n  }\n\n  return new Response(404, {}, {\n    errors: [\"The email you entered is not Registered. Not Found error\"]\n  });\n};\n/**\r\n * This handler handles removing videos from user's playlists.\r\n * send DELETE Request at /api/user/playlists/:playlistId\r\n * */\n\nexport const removePlaylistHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (user) {\n    const playlistId = request.params.playlistId;\n    const filteredPlaylists = user.playlists.filter(item => item._id !== playlistId);\n    this.db.users.update({\n      playlists: filteredPlaylists\n    });\n    return new Response(200, {}, {\n      playlists: filteredPlaylists\n    });\n  }\n\n  return new Response(404, {}, {\n    errors: [\"The user you request does not exist. Not Found error.\"]\n  });\n};\n/**\r\n * This handler handles getting videos from user's playlist.\r\n * send GET Request at /api/user/playlists/:playlistId\r\n * */\n\nexport const getVideosFromPlaylistHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (user) {\n    const playlistId = request.params.playlistId;\n    const playlist = user.playlists.find(item => item._id !== playlistId);\n    return new Response(200, {}, {\n      playlist\n    });\n  }\n\n  return new Response(404, {}, {\n    errors: [\"The user you request does not exist. Not Found error.\"]\n  });\n};\n/**\r\n * This handler handles adding videos from user's playlist.\r\n * send POST Request at /api/user/playlists/:playlistId\r\n * body contains {video}\r\n * */\n\nexport const addVideoToPlaylistHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (user) {\n    const playlistId = request.params.playlistId;\n    const {\n      video\n    } = JSON.parse(request.requestBody);\n    const playlist = user.playlists.find(item => item._id === playlistId);\n\n    if (playlist.videos.some(item => item.id === video.id)) {\n      return new Response(409, {}, {\n        errors: [\"The video is already in your playlist\"]\n      });\n    }\n\n    playlist.videos.push(video);\n    return new Response(201, {}, {\n      playlist\n    });\n  }\n\n  return new Response(404, {}, {\n    errors: [\"The user you request does not exist. Not Found error.\"]\n  });\n};\n/**\r\n * This handler handles removing videos from user's playlist.\r\n * send DELETE Request at /api/user/playlists/:playlistId/:videoId\r\n * */\n\nexport const removeVideoFromPlaylistHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (user) {\n    const playlistId = request.params.playlistId;\n    const videoId = request.params.videoId;\n    let playlist = user.playlists.find(item => item._id === playlistId);\n    const filteredVideos = playlist.videos.filter(item => item._id !== videoId);\n    playlist.videos = filteredVideos;\n    return new Response(200, {}, {\n      playlist\n    });\n  }\n\n  return new Response(404, {}, {\n    errors: [\"The user you request does not exist. Not Found error.\"]\n  });\n};","map":{"version":3,"sources":["C:/Users/susan/OneDrive/Documents/GitHub/revisit/src/backend/controllers/PlaylistController.js"],"names":["Response","requiresAuth","v4","uuid","getAllPlaylistsHandler","schema","request","user","call","errors","playlists","error","addNewPlaylistHandler","playlist","JSON","parse","requestBody","push","videos","_id","removePlaylistHandler","playlistId","params","filteredPlaylists","filter","item","db","users","update","getVideosFromPlaylistHandler","find","addVideoToPlaylistHandler","video","some","id","removeVideoFromPlaylistHandler","videoId","filteredVideos"],"mappings":"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","sourcesContent":["import { Response } from \"miragejs\";\r\nimport { requiresAuth } from \"../utils/authUtils\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\n/**\r\n * All the routes related to User Playlists are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\r\n\r\n/**\r\n * This handler handles getting all user's playlists.\r\n * send GET Request at /api/user/playlist\r\n * */\r\nexport const getAllPlaylistsHandler = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    try {\r\n        if (!user) {\r\n            return new Response(\r\n                404,\r\n                {},\r\n                {\r\n                    errors: [\r\n                        \"The email you entered is not Registered. Not Found error\",\r\n                    ],\r\n                }\r\n            );\r\n        }\r\n        return new Response(200, {}, { playlists: user.playlists });\r\n    } catch (error) {\r\n        return new Response(\r\n            500,\r\n            {},\r\n            {\r\n                error,\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * This handler handles adding playlist to user's playlists.\r\n * send POST Request at /api/user/playlists\r\n * body contains {playlist: {title: \"foo\", description:\"bar bar bar\" }}\r\n * */\r\n\r\nexport const addNewPlaylistHandler = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    if (user) {\r\n        const { playlist } = JSON.parse(request.requestBody);\r\n        user.playlists.push({ ...playlist, videos: [], _id: uuid() });\r\n        return new Response(201, {}, { playlists: user.playlists });\r\n    }\r\n    return new Response(\r\n        404,\r\n        {},\r\n        {\r\n            errors: [\r\n                \"The email you entered is not Registered. Not Found error\",\r\n            ],\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * This handler handles removing videos from user's playlists.\r\n * send DELETE Request at /api/user/playlists/:playlistId\r\n * */\r\n\r\nexport const removePlaylistHandler = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    if (user) {\r\n        const playlistId = request.params.playlistId;\r\n        const filteredPlaylists = user.playlists.filter(\r\n            (item) => item._id !== playlistId\r\n        );\r\n        this.db.users.update({ playlists: filteredPlaylists });\r\n        return new Response(200, {}, { playlists: filteredPlaylists });\r\n    }\r\n    return new Response(\r\n        404,\r\n        {},\r\n        { errors: [\"The user you request does not exist. Not Found error.\"] }\r\n    );\r\n};\r\n\r\n/**\r\n * This handler handles getting videos from user's playlist.\r\n * send GET Request at /api/user/playlists/:playlistId\r\n * */\r\n\r\nexport const getVideosFromPlaylistHandler = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    if (user) {\r\n        const playlistId = request.params.playlistId;\r\n        const playlist = user.playlists.find((item) => item._id !== playlistId);\r\n        return new Response(200, {}, { playlist });\r\n    }\r\n    return new Response(\r\n        404,\r\n        {},\r\n        { errors: [\"The user you request does not exist. Not Found error.\"] }\r\n    );\r\n};\r\n\r\n/**\r\n * This handler handles adding videos from user's playlist.\r\n * send POST Request at /api/user/playlists/:playlistId\r\n * body contains {video}\r\n * */\r\n\r\nexport const addVideoToPlaylistHandler = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    if (user) {\r\n        const playlistId = request.params.playlistId;\r\n        const { video } = JSON.parse(request.requestBody);\r\n        const playlist = user.playlists.find((item) => item._id === playlistId);\r\n        if (playlist.videos.some((item) => item.id === video.id)) {\r\n            return new Response(\r\n                409,\r\n                {},\r\n                {\r\n                    errors: [\"The video is already in your playlist\"],\r\n                }\r\n            );\r\n        }\r\n        playlist.videos.push(video);\r\n        return new Response(201, {}, { playlist });\r\n    }\r\n    return new Response(\r\n        404,\r\n        {},\r\n        { errors: [\"The user you request does not exist. Not Found error.\"] }\r\n    );\r\n};\r\n\r\n/**\r\n * This handler handles removing videos from user's playlist.\r\n * send DELETE Request at /api/user/playlists/:playlistId/:videoId\r\n * */\r\n\r\nexport const removeVideoFromPlaylistHandler = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    if (user) {\r\n        const playlistId = request.params.playlistId;\r\n        const videoId = request.params.videoId;\r\n        let playlist = user.playlists.find((item) => item._id === playlistId);\r\n        const filteredVideos = playlist.videos.filter(\r\n            (item) => item._id !== videoId\r\n        );\r\n        playlist.videos = filteredVideos;\r\n        return new Response(200, {}, { playlist });\r\n    }\r\n    return new Response(\r\n        404,\r\n        {},\r\n        { errors: [\"The user you request does not exist. Not Found error.\"] }\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { requiresAuth } from \"../utils/authUtils\";\n/**\r\n * All the routes related to Liked Videos are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\n\n/**\r\n * This handler handles getting videos from user's likes.\r\n * send GET Request at /api/user/likes\r\n * */\n\nexport const getLikedVideosHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    return new Response(200, {}, {\n      likes: user.likes\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles adding videos to user's likes.\r\n * send POST Request at /api/user/likes\r\n * body contains {video}\r\n * */\n\nexport const addItemToLikedVideos = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (user) {\n    const {\n      video\n    } = JSON.parse(request.requestBody);\n\n    if (user.likes.some(item => item.id === video.id)) {\n      return new Response(409, {}, {\n        errors: [\"The video is already in your liked videos\"]\n      });\n    }\n\n    user.likes.push(video);\n    return new Response(201, {}, {\n      likes: user.likes\n    });\n  }\n\n  return new Response(404, {}, {\n    errors: [\"The email you entered is not Registered. Not Found error\"]\n  });\n};\n/**\r\n * This handler handles removing videos from user's likes.\r\n * send DELETE Request at /api/user/likes/:videoId\r\n * */\n\nexport const removeItemFromLikedVideos = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (user) {\n    const videoId = request.params.videoId;\n    const filteredLikes = user.likes.filter(item => item._id !== videoId);\n    this.db.users.update({\n      likes: filteredLikes\n    });\n    return new Response(200, {}, {\n      likes: filteredLikes\n    });\n  }\n\n  return new Response(404, {}, {\n    errors: [\"The user you request does not exist. Not Found error.\"]\n  });\n};","map":{"version":3,"sources":["C:/Users/susan/OneDrive/Documents/GitHub/revisit/src/backend/controllers/LikeController.js"],"names":["Response","requiresAuth","getLikedVideosHandler","schema","request","user","call","errors","likes","error","addItemToLikedVideos","video","JSON","parse","requestBody","some","item","id","push","removeItemFromLikedVideos","videoId","params","filteredLikes","filter","_id","db","users","update"],"mappings":"AAAA,SAASA,QAAT,QAAyB,UAAzB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AAC5D,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAI;AACA,QAAI,CAACC,IAAL,EAAW;AACP,aAAO,IAAIL,QAAJ,CACH,GADG,EAEH,EAFG,EAGH;AACIO,QAAAA,MAAM,EAAE,CACJ,0DADI;AADZ,OAHG,CAAP;AASH;;AACD,WAAO,IAAIP,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,MAAAA,KAAK,EAAEH,IAAI,CAACG;AAAd,KAAtB,CAAP;AACH,GAbD,CAaE,OAAOC,KAAP,EAAc;AACZ,WAAO,IAAIT,QAAJ,CACH,GADG,EAEH,EAFG,EAGH;AACIS,MAAAA;AADJ,KAHG,CAAP;AAOH;AACJ,CAxBM;AA0BP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,UAAUP,MAAV,EAAkBC,OAAlB,EAA2B;AAC3D,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAIC,IAAJ,EAAU;AACN,UAAM;AAAEM,MAAAA;AAAF,QAAYC,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACU,WAAnB,CAAlB;;AACA,QAAIT,IAAI,CAACG,KAAL,CAAWO,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYN,KAAK,CAACM,EAA5C,CAAJ,EAAqD;AACjD,aAAO,IAAIjB,QAAJ,CACH,GADG,EAEH,EAFG,EAGH;AACIO,QAAAA,MAAM,EAAE,CAAC,2CAAD;AADZ,OAHG,CAAP;AAOH;;AACDF,IAAAA,IAAI,CAACG,KAAL,CAAWU,IAAX,CAAgBP,KAAhB;AACA,WAAO,IAAIX,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,MAAAA,KAAK,EAAEH,IAAI,CAACG;AAAd,KAAtB,CAAP;AACH;;AACD,SAAO,IAAIR,QAAJ,CACH,GADG,EAEH,EAFG,EAGH;AACIO,IAAAA,MAAM,EAAE,CACJ,0DADI;AADZ,GAHG,CAAP;AASH,CAzBM;AA2BP;AACA;AACA;AACA;;AAEA,OAAO,MAAMY,yBAAyB,GAAG,UAAUhB,MAAV,EAAkBC,OAAlB,EAA2B;AAChE,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAIC,IAAJ,EAAU;AACN,UAAMe,OAAO,GAAGhB,OAAO,CAACiB,MAAR,CAAeD,OAA/B;AACA,UAAME,aAAa,GAAGjB,IAAI,CAACG,KAAL,CAAWe,MAAX,CAAmBP,IAAD,IAAUA,IAAI,CAACQ,GAAL,KAAaJ,OAAzC,CAAtB;AACA,SAAKK,EAAL,CAAQC,KAAR,CAAcC,MAAd,CAAqB;AAAEnB,MAAAA,KAAK,EAAEc;AAAT,KAArB;AACA,WAAO,IAAItB,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,MAAAA,KAAK,EAAEc;AAAT,KAAtB,CAAP;AACH;;AACD,SAAO,IAAItB,QAAJ,CACH,GADG,EAEH,EAFG,EAGH;AAAEO,IAAAA,MAAM,EAAE,CAAC,uDAAD;AAAV,GAHG,CAAP;AAKH,CAbM","sourcesContent":["import { Response } from \"miragejs\";\r\nimport { requiresAuth } from \"../utils/authUtils\";\r\n\r\n/**\r\n * All the routes related to Liked Videos are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\r\n\r\n/**\r\n * This handler handles getting videos from user's likes.\r\n * send GET Request at /api/user/likes\r\n * */\r\nexport const getLikedVideosHandler = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    try {\r\n        if (!user) {\r\n            return new Response(\r\n                404,\r\n                {},\r\n                {\r\n                    errors: [\r\n                        \"The email you entered is not Registered. Not Found error\",\r\n                    ],\r\n                }\r\n            );\r\n        }\r\n        return new Response(200, {}, { likes: user.likes });\r\n    } catch (error) {\r\n        return new Response(\r\n            500,\r\n            {},\r\n            {\r\n                error,\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * This handler handles adding videos to user's likes.\r\n * send POST Request at /api/user/likes\r\n * body contains {video}\r\n * */\r\n\r\nexport const addItemToLikedVideos = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    if (user) {\r\n        const { video } = JSON.parse(request.requestBody);\r\n        if (user.likes.some((item) => item.id === video.id)) {\r\n            return new Response(\r\n                409,\r\n                {},\r\n                {\r\n                    errors: [\"The video is already in your liked videos\"],\r\n                }\r\n            );\r\n        }\r\n        user.likes.push(video);\r\n        return new Response(201, {}, { likes: user.likes });\r\n    }\r\n    return new Response(\r\n        404,\r\n        {},\r\n        {\r\n            errors: [\r\n                \"The email you entered is not Registered. Not Found error\",\r\n            ],\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * This handler handles removing videos from user's likes.\r\n * send DELETE Request at /api/user/likes/:videoId\r\n * */\r\n\r\nexport const removeItemFromLikedVideos = function (schema, request) {\r\n    const user = requiresAuth.call(this, request);\r\n    if (user) {\r\n        const videoId = request.params.videoId;\r\n        const filteredLikes = user.likes.filter((item) => item._id !== videoId);\r\n        this.db.users.update({ likes: filteredLikes });\r\n        return new Response(200, {}, { likes: filteredLikes });\r\n    }\r\n    return new Response(\r\n        404,\r\n        {},\r\n        { errors: [\"The user you request does not exist. Not Found error.\"] }\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}